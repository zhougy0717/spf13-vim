" When .vimrc is edited, reload it
autocmd! bufwritepost .vimrc* source ~/.vimrc

if WINDOWS()
    colorscheme desert
else
    colorscheme desert256v2
endif
let g:airline_theme = 'dark'
let g:airline#extensions#tabline#enabled = 1

"----------------------------------------------------------------
"编码设置
"----------------------------------------------------------------
"Vim 在与屏幕/键盘交互时使用的编码(取决于实际的终端的设定)        
set encoding=utf-8
set langmenu=zh_CN.UTF-8
" 设置打开文件的编码格式  
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1 
set fileencoding=utf-8
"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"解决consle输出乱码
if WINDOWS()
    set termencoding=cp936
endif
"设置中文提示
"language messages zh_CN.utf-8 
"设置中文帮助
"set helplang=cn
"设置为双字宽显示，否则无法完整显示如:☆
" set ambiwidth=double


set noignorecase
set guifont=Source_Code_Pro_Light:h12:cANSI
"set guifontwide=NSimsun\:h12

"set foldmethod=syntax
set foldlevelstart=99

function! GetGitRoot()
    let l:gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
    if l:gitroot !~ "^\/"
        let l:gitroot = './'
    endif
    return l:gitroot
endfunction

function! GetPhxRoot()
    let l:scm = GetGitRoot()
    if (!empty(glob(l:scm.'/scm')))
        let l:scm .= '/scm'
    endif
    return l:scm.'/phx'
endfunction


" Cscope & grep {
    if !cscope_connection()
        let cscope_out=GetPhxRoot().'/cscope.out'
        if (!empty(glob(cscope_out)))
            execute ':cscope add ' . cscope_out
        endif
    endif
    if WINDOWS()
        nnoremap <F3> :grep /n /s <C-R>=expand("<cword>")<CR> <C-R>=expand("%:e")<CR>
    else
        nmap <F3> :grep -nw --exclude-dir=\gen "<C-R>=expand("<cword>")<CR>" --include=*.<C-R>=expand("%:e")<CR> -r ./
        " 用cscope查找光标处单词
        nnoremap <space>s :cd <C-R>=GetPhxRoot()<CR><CR>:cscope find s <C-R>=expand("<cword>")<CR>
        nnoremap <space>g :cd <C-R>=GetPhxRoot()<CR><CR>:cscope find g <C-R>=expand("<cword>")<CR>
        nnoremap <space>c :cd <C-R>=GetPhxRoot()<CR><CR>:cscope find c <C-R>=expand("<cword>")<CR>
        nnoremap <space>e :cd <C-R>=GetPhxRoot()<CR><CR>:cscope find e <C-R>=expand("<cword>")<CR>
        nnoremap <space>t :cd <C-R>=GetPhxRoot()<CR><CR>:cscope find t <C-R>=expand("<cword>")<CR>
        nnoremap <space>f :cd <C-R>=GetPhxRoot()<CR><CR>:cscope find f <C-R>=expand("<cword>")<CR>
        nnoremap <space>i :cd <C-R>=GetPhxRoot()<CR><CR>:cscope find i <C-R>=expand("<cword>")<CR>
    endif
" }
nnoremap <leader>cw :botright cwindow<CR>

set cscopetagorder=1 " Search tags at first.
" Use quickfix window to show the result from cscope.
set cscopequickfix=s-,c-,d-,i-,t-,e-


if has('gui_running')
    set mouse=a                " Disable - Automatically enable mouse usage
else
    set mouse=                 " Disable - Automatically enable mouse usage
endif
set nospell

" Key (re)Mappings {
    if exists('g:spf13_no_fastTabs')
        map <C-S-H> gT
        map <C-S-L> gt
    endif
    nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR> " 用空格键来开关折叠
    cmap <F7> <C-R>=GetGitRoot()<CR>
" }
" ctrlp {
    if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
        "nnoremap <silent> <Leader>f :CtrlP<CR>
        nnoremap <silent> <Leader>u :CtrlPMRU<CR>
        if isdirectory(expand("~/.vim/bundle/ctrlp-funky/"))
            nnoremap <Leader>fU :CtrlPFunky <C-R>=expand('<cword>')<CR><CR>
        endif
    endif
"}

"Snippet
"{
    let g:snips_author = 'Ben'
    if exists("g:neosnippet#snippets_directory")
        let s:plugin_directory = fnamemodify(resolve(expand('<sfile>:p')), ':h')
        let g:my_plugin#neosnippet_directory = simplify(s:plugin_directory."/snippets")
        " This line will add directory to neosnippet#get_snippets_directory()
        let g:neosnippet#snippets_directory .= ', '.g:my_plugin#neosnippet_directory
        "echomsg "get_dir:".string(neosnippet#get_snippets_directory())
        "echomsg "dir:".string(g:neosnippet#snippets_directory)
    endif

    if count(g:spf13_bundle_groups, 'snipmate')
        let g:snippets_dir='~/.vim/bundle/vim-snippets/snippets'
        imap <C-R><Tab> <Plug>snipMateShow
    endif
"}

"tags
"{
    set tags=
    let &tags = &tags . GetPhxRoot() . '/tags'
"}

"neocomplete
"{
    if count(g:spf13_bundle_groups, 'neocomplete')
        "call neocomplete#custom#source('tag', 'disabled', 1)
        call neocomplete#custom#source('omni', 'disabled', 1)
        "let g:neocomplete#sources#tags#cache_limit_size=300000000
    endif
"}
