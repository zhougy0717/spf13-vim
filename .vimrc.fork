" When .vimrc is edited, reload it
autocmd! bufwritepost .vimrc* source ~/.vimrc

if WINDOWS()
    colorscheme desert
else
    colorscheme desert256v2
endif
let g:airline_theme = 'dark'
let g:airline#extensions#tabline#enabled = 1

"----------------------------------------------------------------
"编码设置
"----------------------------------------------------------------
"Vim 在与屏幕/键盘交互时使用的编码(取决于实际的终端的设定)        
set encoding=utf-8
set langmenu=zh_CN.UTF-8
" 设置打开文件的编码格式  
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1 
set fileencoding=utf-8
"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"解决consle输出乱码
if WINDOWS()
    set termencoding=cp936
endif
"设置中文提示
"language messages zh_CN.utf-8 
"设置中文帮助
"set helplang=cn
"设置为双字宽显示，否则无法完整显示如:☆
" set ambiwidth=double


set noignorecase
set guifont=Source_Code_Pro_Light:h12:cANSI
"set guifontwide=NSimsun\:h12

set foldmethod=syntax
set foldlevelstart=99
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR> " 用空格键来开关折叠
if WINDOWS()
    nnoremap <F3> :grep /n /s <C-R>=expand("<cword>")<CR> <C-R>=expand("%:e")<CR>
else
    nnoremap <F3> :grep -nw --include=*.<C-R>=expand("%:e")<CR> --exclude-dir=\gen "<C-R>=expand("<cword>")<CR>" -r ./
endif
nnoremap <leader>cw :botright cwindow<CR>

" 用cscope查找光标处单词
nmap <space>s :cscope find s <C-R>=expand("<cword>")<CR>
nmap <space>g :cscope find g <C-R>=expand("<cword>")<CR>
nmap <space>c :cscope find c <C-R>=expand("<cword>")<CR>
nmap <space>e :cscope find e <C-R>=expand("<cword>")<CR>
nmap <space>t :cscope find t <C-R>=expand("<cword>")<CR>
nmap <space>f :cscope find f <C-R>=expand("<cword>")<CR>
nmap <space>i :cscope find i <C-R>=expand("<cword>")<CR>

set cscopetagorder=1 " Search tags at first.
" Use quickfix window to show the result from cscope.
set cscopequickfix=s-,c-,d-,i-,t-,e-

set mouse=                 " Disable - Automatically enable mouse usage
set nospell

" ctrlp {
    if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
        let g:ctrlp_working_path_mode = 'ra'
        nnoremap <silent> <leader>f :CtrlP<CR>
        nnoremap <silent> <leader>p :CtrlPMRU<CR>
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

        if executable('ag')
            let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
        elseif executable('ack-grep')
            let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
        elseif executable('ack')
            let s:ctrlp_fallback = 'ack %s --nocolor -f'
        " On Windows use "dir" as fallback command.
        elseif WINDOWS()
            let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
        else
            let s:ctrlp_fallback = 'find %s -type f'
        endif
        if exists("g:ctrlp_user_command")
            unlet g:ctrlp_user_command
        endif
        let g:ctrlp_user_command = {
            \ 'types': {
                \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                \ 2: ['.hg', 'hg --cwd %s locate -I .'],
            \ },
            \ 'fallback': s:ctrlp_fallback
        \ }

        if isdirectory(expand("~/.vim/bundle/ctrlp-funky/"))
            nnoremap <Leader>fU :CtrlPFunky <C-R>=expand('<cword>')<CR><CR>
        endif
    endif
"}
